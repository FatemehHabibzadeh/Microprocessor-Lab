
AVRASM ver. 2.1.30  D:\work\AVR\the lcd\part3\Debug\List\part3.asm Thu Oct 21 18:32:08 2021

D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\work\AVR\the lcd\part3\Debug\List\part3.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _h=R4
                 	.DEF _h_msb=R5
                 	.DEF _m=R6
                 	.DEF _m_msb=R7
                 	.DEF _s=R8
                 	.DEF _s_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 008f 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7270
000034 7365
000035 2073
000036 6966      	.DB  0x70,0x72,0x65,0x73,0x73,0x20,0x66,0x69
000037 7372
000038 2074
000039 7562
00003a 7474      	.DB  0x72,0x73,0x74,0x20,0x62,0x75,0x74,0x74
00003b 6e6f
00003c 7420
00003d 206f
00003e 6573      	.DB  0x6F,0x6E,0x20,0x74,0x6F,0x20,0x73,0x65
00003f 0074
000040 6573
000041 2074
000042 6f68      	.DB  0x74,0x0,0x73,0x65,0x74,0x20,0x68,0x6F
000043 7275
000044 003a
000045 6425
000046 2d3a      	.DB  0x75,0x72,0x3A,0x0,0x25,0x64,0x3A,0x2D
000047 3a2d
000048 2d2d
000049 2d00
00004a 3a2d      	.DB  0x2D,0x3A,0x2D,0x2D,0x0,0x2D,0x2D,0x3A
00004b 6425
00004c 2d3a
00004d 002d
00004e 2d2d      	.DB  0x25,0x64,0x3A,0x2D,0x2D,0x0,0x2D,0x2D
00004f 2d3a
000050 3a2d
000051 6425
000052 2500      	.DB  0x3A,0x2D,0x2D,0x3A,0x25,0x64,0x0,0x25
000053 3a64
000054 6425
000055 253a
000056 0064      	.DB  0x64,0x3A,0x25,0x64,0x3A,0x25,0x64,0x0
                 _0x2000003:
000057 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000058 001a      	.DW  0x1A
000059 0160      	.DW  _0x8
00005a 0066      	.DW  _0x0*2
                 
00005b 000a      	.DW  0x0A
00005c 017a      	.DW  _0x8+26
00005d 0080      	.DW  _0x0*2+26
                 
00005e 0002      	.DW  0x02
00005f 018a      	.DW  __base_y_G100
000060 00ae      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bffb      	OUT  GICR,R31
000067 bfeb      	OUT  GICR,R30
000068 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 10/20/2021
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;unsigned char str[6];
                 ;int h, m, s;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00008f 920a      	ST   -Y,R0
000090 93ea      	ST   -Y,R30
000091 93fa      	ST   -Y,R31
000092 b7ef      	IN   R30,SREG
000093 93ea      	ST   -Y,R30
                 ; 0000 0022     TCNT1H=0x85EE >> 8;
000094 e8e5      	LDI  R30,LOW(133)
000095 bded      	OUT  0x2D,R30
                 ; 0000 0023     TCNT1L=0x85EE & 0xff;
000096 eeee      	LDI  R30,LOW(238)
000097 bdec      	OUT  0x2C,R30
                 ; 0000 0024     s--;
000098 01f4      	MOVW R30,R8
000099 9731      	SBIW R30,1
00009a 014f      	MOVW R8,R30
                 ; 0000 0025     if(s == 0){
00009b 2c08      	MOV  R0,R8
00009c 2809      	OR   R0,R9
00009d f431      	BRNE _0x3
                 ; 0000 0026      m--;
00009e 01f3      	MOVW R30,R6
00009f 9731      	SBIW R30,1
0000a0 013f      	MOVW R6,R30
                 ; 0000 0027      s = 59;
0000a1 e3eb      	LDI  R30,LOW(59)
0000a2 e0f0      	LDI  R31,HIGH(59)
0000a3 014f      	MOVW R8,R30
                 ; 0000 0028     }
                 ; 0000 0029     if(m == 0){
                 _0x3:
0000a4 2c06      	MOV  R0,R6
0000a5 2807      	OR   R0,R7
0000a6 f431      	BRNE _0x4
                 ; 0000 002A      h--;
0000a7 01f2      	MOVW R30,R4
0000a8 9731      	SBIW R30,1
0000a9 012f      	MOVW R4,R30
                 ; 0000 002B      m = 59;
0000aa e3eb      	LDI  R30,LOW(59)
0000ab e0f0      	LDI  R31,HIGH(59)
0000ac 013f      	MOVW R6,R30
                 ; 0000 002C     }
                 ; 0000 002D     if(h == 0 && m == 0 && s == 0){
                 _0x4:
0000ad 2400      	CLR  R0
0000ae 1404      	CP   R0,R4
0000af 0405      	CPC  R0,R5
0000b0 f441      	BRNE _0x6
0000b1 2400      	CLR  R0
0000b2 1406      	CP   R0,R6
0000b3 0407      	CPC  R0,R7
0000b4 f421      	BRNE _0x6
0000b5 2400      	CLR  R0
0000b6 1408      	CP   R0,R8
0000b7 0409      	CPC  R0,R9
0000b8 f009      	BREQ _0x7
                 _0x6:
0000b9 c001      	RJMP _0x5
                 _0x7:
                 ; 0000 002E      #asm("cli")
0000ba 94f8      	cli
                 ; 0000 002F     }
                 ; 0000 0030 }
                 _0x5:
0000bb 91e9      	LD   R30,Y+
0000bc bfef      	OUT  SREG,R30
0000bd 91f9      	LD   R31,Y+
0000be 91e9      	LD   R30,Y+
0000bf 9009      	LD   R0,Y+
0000c0 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0033 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0034 // Declare your local variables here
                 ; 0000 0035 
                 ; 0000 0036 // Input/Output Ports initialization
                 ; 0000 0037 // Port A initialization
                 ; 0000 0038 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0039 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbea      	OUT  0x1A,R30
                 ; 0000 003A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000c3 bbeb      	OUT  0x1B,R30
                 ; 0000 003C 
                 ; 0000 003D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c4 bbe7      	OUT  0x17,R30
                 ; 0000 003E 
                 ; 0000 003F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c5 bbe8      	OUT  0x18,R30
                 ; 0000 0040 
                 ; 0000 0041 
                 ; 0000 0042 // Timer/Counter 1 initialization
                 ; 0000 0043 // Clock source: System Clock
                 ; 0000 0044 // Clock value: 31.250 kHz
                 ; 0000 0045 // Mode: Normal top=0xFFFF
                 ; 0000 0046 // OC1A output: Disconnected
                 ; 0000 0047 // OC1B output: Disconnected
                 ; 0000 0048 // Noise Canceler: Off
                 ; 0000 0049 // Input Capture on Falling Edge
                 ; 0000 004A // Timer Period: 1 s
                 ; 0000 004B // Timer1 Overflow Interrupt: On
                 ; 0000 004C // Input Capture Interrupt: Off
                 ; 0000 004D // Compare A Match Interrupt: Off
                 ; 0000 004E // Compare B Match Interrupt: Off
                 ; 0000 004F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c6 bdef      	OUT  0x2F,R30
                 ; 0000 0050 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000c7 e0e4      	LDI  R30,LOW(4)
0000c8 bdee      	OUT  0x2E,R30
                 ; 0000 0051 TCNT1H=0x85;
0000c9 e8e5      	LDI  R30,LOW(133)
0000ca bded      	OUT  0x2D,R30
                 ; 0000 0052 TCNT1L=0xEE;
0000cb eeee      	LDI  R30,LOW(238)
0000cc bdec      	OUT  0x2C,R30
                 ; 0000 0053 ICR1H=0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bde7      	OUT  0x27,R30
                 ; 0000 0054 ICR1L=0x00;
0000cf bde6      	OUT  0x26,R30
                 ; 0000 0055 OCR1AH=0x00;
0000d0 bdeb      	OUT  0x2B,R30
                 ; 0000 0056 OCR1AL=0x00;
0000d1 bdea      	OUT  0x2A,R30
                 ; 0000 0057 OCR1BH=0x00;
0000d2 bde9      	OUT  0x29,R30
                 ; 0000 0058 OCR1BL=0x00;
0000d3 bde8      	OUT  0x28,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000d4 e0e4      	LDI  R30,LOW(4)
0000d5 bfe9      	OUT  0x39,R30
                 ; 0000 005C 
                 ; 0000 005D 
                 ; 0000 005E lcd_init(16);
0000d6 e1a0      	LDI  R26,LOW(16)
0000d7 d0e0      	RCALL _lcd_init
                 ; 0000 005F lcd_clear();
0000d8 d0ad      	RCALL _lcd_clear
                 ; 0000 0060 lcd_puts("press first button to set");
                +
0000d9 e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000da e0b1     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000db d0cb      	RCALL _lcd_puts
                 ; 0000 0061 // Global enable interrupts
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064 while (1)
                 _0x9:
                 ; 0000 0065       {
                 ; 0000 0066         if(PINB.6){
0000dc 9bb6      	SBIS 0x16,6
0000dd c05d      	RJMP _0xC
                 ; 0000 0067             #asm("cli")
0000de 94f8      	cli
                 ; 0000 0068             lcd_clear();
0000df d0a6      	RCALL _lcd_clear
                 ; 0000 0069             lcd_puts("set hour:");
                +
0000e0 e7aa     +LDI R26 , LOW ( _0x8 + ( 26 ) )
0000e1 e0b1     +LDI R27 , HIGH ( _0x8 + ( 26 ) )
                 	__POINTW2MN _0x8,26
0000e2 d0c4      	RCALL _lcd_puts
                 ; 0000 006A             delay_ms(250);
0000e3 940e 03a7 	CALL SUBOPT_0x0
                 ; 0000 006B             while(!PINB.6){
                 _0xD:
0000e5 99b6      	SBIC 0x16,6
0000e6 c017      	RJMP _0xF
                 ; 0000 006C                 if(PINB.7){
0000e7 9bb7      	SBIS 0x16,7
0000e8 c005      	RJMP _0x10
                 ; 0000 006D                     h++;
0000e9 01f2      	MOVW R30,R4
0000ea 9631      	ADIW R30,1
0000eb 012f      	MOVW R4,R30
                 ; 0000 006E                     delay_ms(50);
0000ec 940e 03ab 	CALL SUBOPT_0x1
                 ; 0000 006F                 }
                 ; 0000 0070                 sprintf(str,"%d:--:--",h);
                 _0x10:
0000ee 940e 03af 	CALL SUBOPT_0x2
                +
0000f0 e8ea     +LDI R30 , LOW ( 2 * _0x0 + ( 36 ) )
0000f1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW1FN _0x0,36
0000f2 940e 03b4 	CALL SUBOPT_0x3
0000f4 940e 03bc 	CALL SUBOPT_0x4
                 ; 0000 0071                 lcd_clear();
                 ; 0000 0072                 delay_ms(150);
0000f6 e9a6      	LDI  R26,LOW(150)
0000f7 940e 03c2 	CALL SUBOPT_0x5
                 ; 0000 0073                 lcd_puts(str);
                 ; 0000 0074                 delay_ms(150);
0000f9 e9a6      	LDI  R26,LOW(150)
0000fa e0b0      	LDI  R27,0
0000fb 940e 0408 	CALL _delay_ms
                 ; 0000 0075             }
0000fd cfe7      	RJMP _0xD
                 _0xF:
                 ; 0000 0076             delay_ms(250);
0000fe 940e 03a7 	CALL SUBOPT_0x0
                 ; 0000 0077             while(!PINB.6){
                 _0x11:
000100 99b6      	SBIC 0x16,6
000101 c018      	RJMP _0x13
                 ; 0000 0078                 if(PINB.7){
000102 9bb7      	SBIS 0x16,7
000103 c005      	RJMP _0x14
                 ; 0000 0079                     m++;
000104 01f3      	MOVW R30,R6
000105 9631      	ADIW R30,1
000106 013f      	MOVW R6,R30
                 ; 0000 007A                     delay_ms(50);
000107 940e 03ab 	CALL SUBOPT_0x1
                 ; 0000 007B                 }
                 ; 0000 007C                 sprintf(str,"--:%d:--",m);
                 _0x14:
000109 940e 03af 	CALL SUBOPT_0x2
                +
00010b e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
00010c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
00010d 93fa      	ST   -Y,R31
00010e 93ea      	ST   -Y,R30
00010f 01f3      	MOVW R30,R6
000110 940e 03c9 	CALL SUBOPT_0x6
                 ; 0000 007D                 lcd_clear();
                 ; 0000 007E                 delay_ms(200);
000112 eca8      	LDI  R26,LOW(200)
000113 940e 03c2 	CALL SUBOPT_0x5
                 ; 0000 007F                 lcd_puts(str);
                 ; 0000 0080                 delay_ms(200);
000115 eca8      	LDI  R26,LOW(200)
000116 e0b0      	LDI  R27,0
000117 940e 0408 	CALL _delay_ms
                 ; 0000 0081             }
000119 cfe6      	RJMP _0x11
                 _0x13:
                 ; 0000 0082             delay_ms(250);
00011a 940e 03a7 	CALL SUBOPT_0x0
                 ; 0000 0083             while(!PINB.6){
                 _0x15:
00011c 99b6      	SBIC 0x16,6
00011d c018      	RJMP _0x17
                 ; 0000 0084                 if(PINB.7){
00011e 9bb7      	SBIS 0x16,7
00011f c005      	RJMP _0x18
                 ; 0000 0085                     s++;
000120 01f4      	MOVW R30,R8
000121 9631      	ADIW R30,1
000122 014f      	MOVW R8,R30
                 ; 0000 0086                     delay_ms(50);
000123 940e 03ab 	CALL SUBOPT_0x1
                 ; 0000 0087                 }
                 ; 0000 0088                 sprintf(str,"--:--:%d",s);
                 _0x18:
000125 940e 03af 	CALL SUBOPT_0x2
                +
000127 e9ec     +LDI R30 , LOW ( 2 * _0x0 + ( 54 ) )
000128 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 54 ) )
                 	__POINTW1FN _0x0,54
000129 93fa      	ST   -Y,R31
00012a 93ea      	ST   -Y,R30
00012b 01f4      	MOVW R30,R8
00012c 940e 03c9 	CALL SUBOPT_0x6
                 ; 0000 0089                 lcd_clear();
                 ; 0000 008A                 delay_ms(200);
00012e eca8      	LDI  R26,LOW(200)
00012f 940e 03c2 	CALL SUBOPT_0x5
                 ; 0000 008B                 lcd_puts(str);
                 ; 0000 008C                 delay_ms(200);
000131 eca8      	LDI  R26,LOW(200)
000132 e0b0      	LDI  R27,0
000133 940e 0408 	CALL _delay_ms
                 ; 0000 008D             }
000135 cfe6      	RJMP _0x15
                 _0x17:
                 ; 0000 008E             #asm("sei")
000136 9478      	sei
                 ; 0000 008F             delay_ms(500);
000137 efa4      	LDI  R26,LOW(500)
000138 e0b1      	LDI  R27,HIGH(500)
000139 940e 0408 	CALL _delay_ms
                 ; 0000 0090         }
                 ; 0000 0091         sprintf(str,"%d:%d:%d",h,m,s);
                 _0xC:
00013b 940e 03af 	CALL SUBOPT_0x2
                +
00013d eae5     +LDI R30 , LOW ( 2 * _0x0 + ( 63 ) )
00013e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 63 ) )
                 	__POINTW1FN _0x0,63
00013f 940e 03b4 	CALL SUBOPT_0x3
000141 01f3      	MOVW R30,R6
000142 940e 041a 	CALL __CWD1
000144 940e 0427 	CALL __PUTPARD1
000146 01f4      	MOVW R30,R8
000147 940e 041a 	CALL __CWD1
000149 940e 0427 	CALL __PUTPARD1
00014b e08c      	LDI  R24,12
00014c 940e 035a 	CALL _sprintf
00014e 9660      	ADIW R28,16
                 ; 0000 0092         lcd_clear();
00014f d036      	RCALL _lcd_clear
                 ; 0000 0093         lcd_puts(str);
000150 e8a4      	LDI  R26,LOW(_str)
000151 e0b1      	LDI  R27,HIGH(_str)
000152 d054      	RCALL _lcd_puts
                 ; 0000 0094         delay_ms(10);
000153 e0aa      	LDI  R26,LOW(10)
000154 e0b0      	LDI  R27,0
000155 940e 0408 	CALL _delay_ms
                 ; 0000 0095 
                 ; 0000 0096       }
000157 cf84      	RJMP _0x9
                 ; 0000 0097 }
                 _0x19:
000158 cfff      	RJMP _0x19
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000160           	.BYTE 0x24
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000159 93aa      	ST   -Y,R26
00015a b3eb      	IN   R30,0x1B
00015b 70ef      	ANDI R30,LOW(0xF)
00015c 2fae      	MOV  R26,R30
00015d 81e8      	LD   R30,Y
00015e 7fe0      	ANDI R30,LOW(0xF0)
00015f 2bea      	OR   R30,R26
000160 bbeb      	OUT  0x1B,R30
                +
000161 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000162 958a     +DEC R24
000163 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000164 9ada      	SBI  0x1B,2
                +
000165 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000166 958a     +DEC R24
000167 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000168 98da      	CBI  0x1B,2
                +
000169 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00016a 958a     +DEC R24
00016b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00016c c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00016d 93aa      	ST   -Y,R26
00016e 81a8      	LD   R26,Y
00016f dfe9      	RCALL __lcd_write_nibble_G100
000170 81e8          ld    r30,y
000171 95e2          swap  r30
000172 83e8          st    y,r30
000173 81a8      	LD   R26,Y
000174 dfe4      	RCALL __lcd_write_nibble_G100
                +
000175 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000176 958a     +DEC R24
000177 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000178 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000179 93aa      	ST   -Y,R26
00017a 81e8      	LD   R30,Y
00017b e0f0      	LDI  R31,0
00017c 57e6      	SUBI R30,LOW(-__base_y_G100)
00017d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00017e 81e0      	LD   R30,Z
00017f 81a9      	LDD  R26,Y+1
000180 0fae      	ADD  R26,R30
000181 dfeb      	RCALL __lcd_write_data
000182 80b9      	LDD  R11,Y+1
000183 80a8      	LDD  R10,Y+0
000184 9622      	ADIW R28,2
000185 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000186 e0a2      	LDI  R26,LOW(2)
000187 940e 03ce 	CALL SUBOPT_0x7
000189 e0ac      	LDI  R26,LOW(12)
00018a dfe2      	RCALL __lcd_write_data
00018b e0a1      	LDI  R26,LOW(1)
00018c 940e 03ce 	CALL SUBOPT_0x7
00018e e0e0      	LDI  R30,LOW(0)
00018f 2eae      	MOV  R10,R30
000190 2ebe      	MOV  R11,R30
000191 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000192 93aa      	ST   -Y,R26
000193 81a8      	LD   R26,Y
000194 30aa      	CPI  R26,LOW(0xA)
000195 f011      	BREQ _0x2000005
000196 14bd      	CP   R11,R13
000197 f048      	BRLO _0x2000004
                 _0x2000005:
000198 e0e0      	LDI  R30,LOW(0)
000199 93ea      	ST   -Y,R30
00019a 94a3      	INC  R10
00019b 2daa      	MOV  R26,R10
00019c dfdc      	RCALL _lcd_gotoxy
00019d 81a8      	LD   R26,Y
00019e 30aa      	CPI  R26,LOW(0xA)
00019f f409      	BRNE _0x2000007
0001a0 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001a1 94b3      	INC  R11
0001a2 9ad8      	SBI  0x1B,0
0001a3 81a8      	LD   R26,Y
0001a4 dfc8      	RCALL __lcd_write_data
0001a5 98d8      	CBI  0x1B,0
0001a6 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001a7 93ba      	ST   -Y,R27
0001a8 93aa      	ST   -Y,R26
0001a9 931a      	ST   -Y,R17
                 _0x2000008:
0001aa 81a9      	LDD  R26,Y+1
0001ab 81ba      	LDD  R27,Y+1+1
0001ac 91ed      	LD   R30,X+
0001ad 83a9      	STD  Y+1,R26
0001ae 83ba      	STD  Y+1+1,R27
0001af 2f1e      	MOV  R17,R30
0001b0 30e0      	CPI  R30,0
0001b1 f019      	BREQ _0x200000A
0001b2 2fa1      	MOV  R26,R17
0001b3 dfde      	RCALL _lcd_putchar
0001b4 cff5      	RJMP _0x2000008
                 _0x200000A:
0001b5 8118      	LDD  R17,Y+0
0001b6 9623      	ADIW R28,3
0001b7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001b8 93aa      	ST   -Y,R26
0001b9 b3ea      	IN   R30,0x1A
0001ba 6fe0      	ORI  R30,LOW(0xF0)
0001bb bbea      	OUT  0x1A,R30
0001bc 9ad2      	SBI  0x1A,2
0001bd 9ad0      	SBI  0x1A,0
0001be 9ad1      	SBI  0x1A,1
0001bf 98da      	CBI  0x1B,2
0001c0 98d8      	CBI  0x1B,0
0001c1 98d9      	CBI  0x1B,1
0001c2 80d8      	LDD  R13,Y+0
0001c3 81e8      	LD   R30,Y
0001c4 58e0      	SUBI R30,-LOW(128)
                +
0001c5 93e0 018c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001c7 81e8      	LD   R30,Y
0001c8 54e0      	SUBI R30,-LOW(192)
                +
0001c9 93e0 018d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001cb e1a4      	LDI  R26,LOW(20)
0001cc e0b0      	LDI  R27,0
0001cd 940e 0408 	CALL _delay_ms
0001cf 940e 03d4 	CALL SUBOPT_0x8
0001d1 940e 03d4 	CALL SUBOPT_0x8
0001d3 940e 03d4 	CALL SUBOPT_0x8
0001d5 e2a0      	LDI  R26,LOW(32)
0001d6 df82      	RCALL __lcd_write_nibble_G100
                +
0001d7 ec88     +LDI R24 , LOW ( 200 )
0001d8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001d9 9701     +SBIW R24 , 1
0001da f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001db e2a8      	LDI  R26,LOW(40)
0001dc df90      	RCALL __lcd_write_data
0001dd e0a4      	LDI  R26,LOW(4)
0001de df8e      	RCALL __lcd_write_data
0001df e8a5      	LDI  R26,LOW(133)
0001e0 df8c      	RCALL __lcd_write_data
0001e1 e0a6      	LDI  R26,LOW(6)
0001e2 df8a      	RCALL __lcd_write_data
0001e3 dfa2      	RCALL _lcd_clear
                 _0x2080002:
0001e4 9621      	ADIW R28,1
0001e5 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001e6 93ba      	ST   -Y,R27
0001e7 93aa      	ST   -Y,R26
0001e8 931a      	ST   -Y,R17
0001e9 930a      	ST   -Y,R16
0001ea 81aa      	LDD  R26,Y+2
0001eb 81bb      	LDD  R27,Y+2+1
0001ec 9612      	ADIW R26,2
0001ed 940e 041f 	CALL __GETW1P
0001ef 9730      	SBIW R30,0
0001f0 f159      	BREQ _0x2020010
0001f1 81aa      	LDD  R26,Y+2
0001f2 81bb      	LDD  R27,Y+2+1
0001f3 9614      	ADIW R26,4
0001f4 940e 041f 	CALL __GETW1P
0001f6 018f      	MOVW R16,R30
0001f7 9730      	SBIW R30,0
0001f8 f061      	BREQ _0x2020012
                +
0001f9 3002     +CPI R16 , LOW ( 2 )
0001fa e0e0     +LDI R30 , HIGH ( 2 )
0001fb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001fc f098      	BRLO _0x2020013
0001fd 01f8      	MOVW R30,R16
0001fe 9731      	SBIW R30,1
0001ff 018f      	MOVW R16,R30
                +
000200 81aa     +LDD R26 , Y + 2
000201 81bb     +LDD R27 , Y + 2 + 1
000202 9614     +ADIW R26 , 4
000203 93ed     +ST X + , R30
000204 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000205 81aa      	LDD  R26,Y+2
000206 81bb      	LDD  R27,Y+2+1
000207 9612      	ADIW R26,2
000208 91ed      	LD   R30,X+
000209 91fd      	LD   R31,X+
00020a 9631      	ADIW R30,1
00020b 93fe      	ST   -X,R31
00020c 93ee      	ST   -X,R30
00020d 9731      	SBIW R30,1
00020e 81ac      	LDD  R26,Y+4
00020f 83a0      	STD  Z+0,R26
                 _0x2020013:
000210 81aa      	LDD  R26,Y+2
000211 81bb      	LDD  R27,Y+2+1
000212 940e 041f 	CALL __GETW1P
000214 23ff      	TST  R31
000215 f02a      	BRMI _0x2020014
000216 91ed      	LD   R30,X+
000217 91fd      	LD   R31,X+
000218 9631      	ADIW R30,1
000219 93fe      	ST   -X,R31
00021a 93ee      	ST   -X,R30
                 _0x2020014:
00021b c006      	RJMP _0x2020015
                 _0x2020010:
00021c 81aa      	LDD  R26,Y+2
00021d 81bb      	LDD  R27,Y+2+1
00021e efef      	LDI  R30,LOW(65535)
00021f efff      	LDI  R31,HIGH(65535)
000220 93ed      	ST   X+,R30
000221 93fc      	ST   X,R31
                 _0x2020015:
000222 8119      	LDD  R17,Y+1
000223 8108      	LDD  R16,Y+0
000224 9625      	ADIW R28,5
000225 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000226 93ba      	ST   -Y,R27
000227 93aa      	ST   -Y,R26
000228 9726      	SBIW R28,6
000229 940e 042c 	CALL __SAVELOCR6
00022b e010      	LDI  R17,0
00022c 85ac      	LDD  R26,Y+12
00022d 85bd      	LDD  R27,Y+12+1
00022e e0e0      	LDI  R30,LOW(0)
00022f e0f0      	LDI  R31,HIGH(0)
000230 93ed      	ST   X+,R30
000231 93fc      	ST   X,R31
                 _0x2020016:
000232 89ea      	LDD  R30,Y+18
000233 89fb      	LDD  R31,Y+18+1
000234 9631      	ADIW R30,1
000235 8bea      	STD  Y+18,R30
000236 8bfb      	STD  Y+18+1,R31
000237 9731      	SBIW R30,1
000238 91e4      	LPM  R30,Z
000239 2f2e      	MOV  R18,R30
00023a 30e0      	CPI  R30,0
00023b f409      	BRNE PC+2
00023c c115      	RJMP _0x2020018
00023d 2fe1      	MOV  R30,R17
00023e 30e0      	CPI  R30,0
00023f f439      	BRNE _0x202001C
000240 3225      	CPI  R18,37
000241 f411      	BRNE _0x202001D
000242 e011      	LDI  R17,LOW(1)
000243 c002      	RJMP _0x202001E
                 _0x202001D:
000244 940e 03dc 	CALL SUBOPT_0x9
                 _0x202001E:
000246 c10a      	RJMP _0x202001B
                 _0x202001C:
000247 30e1      	CPI  R30,LOW(0x1)
000248 f4a9      	BRNE _0x202001F
000249 3225      	CPI  R18,37
00024a f419      	BRNE _0x2020020
00024b 940e 03dc 	CALL SUBOPT_0x9
00024d c102      	RJMP _0x20200CC
                 _0x2020020:
00024e e012      	LDI  R17,LOW(2)
00024f e040      	LDI  R20,LOW(0)
000250 e000      	LDI  R16,LOW(0)
000251 322d      	CPI  R18,45
000252 f411      	BRNE _0x2020021
000253 e001      	LDI  R16,LOW(1)
000254 c0fc      	RJMP _0x202001B
                 _0x2020021:
000255 322b      	CPI  R18,43
000256 f411      	BRNE _0x2020022
000257 e24b      	LDI  R20,LOW(43)
000258 c0f8      	RJMP _0x202001B
                 _0x2020022:
000259 3220      	CPI  R18,32
00025a f411      	BRNE _0x2020023
00025b e240      	LDI  R20,LOW(32)
00025c c0f4      	RJMP _0x202001B
                 _0x2020023:
00025d c002      	RJMP _0x2020024
                 _0x202001F:
00025e 30e2      	CPI  R30,LOW(0x2)
00025f f439      	BRNE _0x2020025
                 _0x2020024:
000260 e050      	LDI  R21,LOW(0)
000261 e013      	LDI  R17,LOW(3)
000262 3320      	CPI  R18,48
000263 f411      	BRNE _0x2020026
000264 6800      	ORI  R16,LOW(128)
000265 c0eb      	RJMP _0x202001B
                 _0x2020026:
000266 c003      	RJMP _0x2020027
                 _0x2020025:
000267 30e3      	CPI  R30,LOW(0x3)
000268 f009      	BREQ PC+2
000269 c0e7      	RJMP _0x202001B
                 _0x2020027:
00026a 3320      	CPI  R18,48
00026b f010      	BRLO _0x202002A
00026c 332a      	CPI  R18,58
00026d f008      	BRLO _0x202002B
                 _0x202002A:
00026e c007      	RJMP _0x2020029
                 _0x202002B:
00026f e0aa      	LDI  R26,LOW(10)
000270 9f5a      	MUL  R21,R26
000271 2d50      	MOV  R21,R0
000272 2fe2      	MOV  R30,R18
000273 53e0      	SUBI R30,LOW(48)
000274 0f5e      	ADD  R21,R30
000275 c0db      	RJMP _0x202001B
                 _0x2020029:
000276 2fe2      	MOV  R30,R18
000277 36e3      	CPI  R30,LOW(0x63)
000278 f449      	BRNE _0x202002F
000279 940e 03e3 	CALL SUBOPT_0xA
00027b 89e8      	LDD  R30,Y+16
00027c 89f9      	LDD  R31,Y+16+1
00027d 81a4      	LDD  R26,Z+4
00027e 93aa      	ST   -Y,R26
00027f 940e 03e9 	CALL SUBOPT_0xB
000281 c0ce      	RJMP _0x2020030
                 _0x202002F:
000282 37e3      	CPI  R30,LOW(0x73)
000283 f441      	BRNE _0x2020032
000284 940e 03e3 	CALL SUBOPT_0xA
000286 940e 03ef 	CALL SUBOPT_0xC
000288 940e 038e 	CALL _strlen
00028a 2f1e      	MOV  R17,R30
00028b c00a      	RJMP _0x2020033
                 _0x2020032:
00028c 37e0      	CPI  R30,LOW(0x70)
00028d f461      	BRNE _0x2020035
00028e 940e 03e3 	CALL SUBOPT_0xA
000290 940e 03ef 	CALL SUBOPT_0xC
000292 940e 039a 	CALL _strlenf
000294 2f1e      	MOV  R17,R30
000295 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000296 6002      	ORI  R16,LOW(2)
000297 770f      	ANDI R16,LOW(127)
000298 e030      	LDI  R19,LOW(0)
000299 c034      	RJMP _0x2020036
                 _0x2020035:
00029a 36e4      	CPI  R30,LOW(0x64)
00029b f011      	BREQ _0x2020039
00029c 36e9      	CPI  R30,LOW(0x69)
00029d f411      	BRNE _0x202003A
                 _0x2020039:
00029e 6004      	ORI  R16,LOW(4)
00029f c002      	RJMP _0x202003B
                 _0x202003A:
0002a0 37e5      	CPI  R30,LOW(0x75)
0002a1 f431      	BRNE _0x202003C
                 _0x202003B:
0002a2 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002a3 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002a4 83ee      	STD  Y+6,R30
0002a5 83ff      	STD  Y+6+1,R31
0002a6 e015      	LDI  R17,LOW(5)
0002a7 c00c      	RJMP _0x202003D
                 _0x202003C:
0002a8 35e8      	CPI  R30,LOW(0x58)
0002a9 f411      	BRNE _0x202003F
0002aa 6008      	ORI  R16,LOW(8)
0002ab c003      	RJMP _0x2020040
                 _0x202003F:
0002ac 37e8      	CPI  R30,LOW(0x78)
0002ad f009      	BREQ PC+2
0002ae c0a1      	RJMP _0x2020071
                 _0x2020040:
0002af e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002b0 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002b1 83ee      	STD  Y+6,R30
0002b2 83ff      	STD  Y+6+1,R31
0002b3 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002b4 ff02      	SBRS R16,2
0002b5 c014      	RJMP _0x2020042
0002b6 940e 03e3 	CALL SUBOPT_0xA
0002b8 940e 03f9 	CALL SUBOPT_0xD
0002ba 85ab      	LDD  R26,Y+11
0002bb 23aa      	TST  R26
0002bc f43a      	BRPL _0x2020043
0002bd 85ea      	LDD  R30,Y+10
0002be 85fb      	LDD  R31,Y+10+1
0002bf 940e 0416 	CALL __ANEGW1
0002c1 87ea      	STD  Y+10,R30
0002c2 87fb      	STD  Y+10+1,R31
0002c3 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002c4 3040      	CPI  R20,0
0002c5 f011      	BREQ _0x2020044
0002c6 5f1f      	SUBI R17,-LOW(1)
0002c7 c001      	RJMP _0x2020045
                 _0x2020044:
0002c8 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002c9 c004      	RJMP _0x2020046
                 _0x2020042:
0002ca 940e 03e3 	CALL SUBOPT_0xA
0002cc 940e 03f9 	CALL SUBOPT_0xD
                 _0x2020046:
                 _0x2020036:
0002ce fd00      	SBRC R16,0
0002cf c011      	RJMP _0x2020047
                 _0x2020048:
0002d0 1715      	CP   R17,R21
0002d1 f478      	BRSH _0x202004A
0002d2 ff07      	SBRS R16,7
0002d3 c008      	RJMP _0x202004B
0002d4 ff02      	SBRS R16,2
0002d5 c004      	RJMP _0x202004C
0002d6 7f0b      	ANDI R16,LOW(251)
0002d7 2f24      	MOV  R18,R20
0002d8 5011      	SUBI R17,LOW(1)
0002d9 c001      	RJMP _0x202004D
                 _0x202004C:
0002da e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002db c001      	RJMP _0x202004E
                 _0x202004B:
0002dc e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002dd 940e 03dc 	CALL SUBOPT_0x9
0002df 5051      	SUBI R21,LOW(1)
0002e0 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002e1 2f31      	MOV  R19,R17
0002e2 ff01      	SBRS R16,1
0002e3 c017      	RJMP _0x202004F
                 _0x2020050:
0002e4 3030      	CPI  R19,0
0002e5 f0a1      	BREQ _0x2020052
0002e6 ff03      	SBRS R16,3
0002e7 c006      	RJMP _0x2020053
0002e8 81ee      	LDD  R30,Y+6
0002e9 81ff      	LDD  R31,Y+6+1
0002ea 9125      	LPM  R18,Z+
0002eb 83ee      	STD  Y+6,R30
0002ec 83ff      	STD  Y+6+1,R31
0002ed c005      	RJMP _0x2020054
                 _0x2020053:
0002ee 81ae      	LDD  R26,Y+6
0002ef 81bf      	LDD  R27,Y+6+1
0002f0 912d      	LD   R18,X+
0002f1 83ae      	STD  Y+6,R26
0002f2 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002f3 940e 03dc 	CALL SUBOPT_0x9
0002f5 3050      	CPI  R21,0
0002f6 f009      	BREQ _0x2020055
0002f7 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002f8 5031      	SUBI R19,LOW(1)
0002f9 cfea      	RJMP _0x2020050
                 _0x2020052:
0002fa c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002fb e320      	LDI  R18,LOW(48)
0002fc 81ee      	LDD  R30,Y+6
0002fd 81ff      	LDD  R31,Y+6+1
0002fe 940e 0423 	CALL __GETW1PF
000300 87e8      	STD  Y+8,R30
000301 87f9      	STD  Y+8+1,R31
000302 81ee      	LDD  R30,Y+6
000303 81ff      	LDD  R31,Y+6+1
000304 9632      	ADIW R30,2
000305 83ee      	STD  Y+6,R30
000306 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000307 85e8      	LDD  R30,Y+8
000308 85f9      	LDD  R31,Y+8+1
000309 85aa      	LDD  R26,Y+10
00030a 85bb      	LDD  R27,Y+10+1
00030b 17ae      	CP   R26,R30
00030c 07bf      	CPC  R27,R31
00030d f050      	BRLO _0x202005C
00030e 5f2f      	SUBI R18,-LOW(1)
00030f 85a8      	LDD  R26,Y+8
000310 85b9      	LDD  R27,Y+8+1
000311 85ea      	LDD  R30,Y+10
000312 85fb      	LDD  R31,Y+10+1
000313 1bea      	SUB  R30,R26
000314 0bfb      	SBC  R31,R27
000315 87ea      	STD  Y+10,R30
000316 87fb      	STD  Y+10+1,R31
000317 cfef      	RJMP _0x202005A
                 _0x202005C:
000318 332a      	CPI  R18,58
000319 f028      	BRLO _0x202005D
00031a ff03      	SBRS R16,3
00031b c002      	RJMP _0x202005E
00031c 5f29      	SUBI R18,-LOW(7)
00031d c001      	RJMP _0x202005F
                 _0x202005E:
00031e 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00031f fd04      	SBRC R16,4
000320 c01a      	RJMP _0x2020061
000321 3321      	CPI  R18,49
000322 f420      	BRSH _0x2020063
000323 85a8      	LDD  R26,Y+8
000324 85b9      	LDD  R27,Y+8+1
000325 9711      	SBIW R26,1
000326 f409      	BRNE _0x2020062
                 _0x2020063:
000327 c009      	RJMP _0x20200CD
                 _0x2020062:
000328 1753      	CP   R21,R19
000329 f010      	BRLO _0x2020067
00032a ff00      	SBRS R16,0
00032b c001      	RJMP _0x2020068
                 _0x2020067:
00032c c013      	RJMP _0x2020066
                 _0x2020068:
00032d e220      	LDI  R18,LOW(32)
00032e ff07      	SBRS R16,7
00032f c00b      	RJMP _0x2020069
000330 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000331 6100      	ORI  R16,LOW(16)
000332 ff02      	SBRS R16,2
000333 c007      	RJMP _0x202006A
000334 7f0b      	ANDI R16,LOW(251)
000335 934a      	ST   -Y,R20
000336 940e 03e9 	CALL SUBOPT_0xB
000338 3050      	CPI  R21,0
000339 f009      	BREQ _0x202006B
00033a 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00033b 940e 03dc 	CALL SUBOPT_0x9
00033d 3050      	CPI  R21,0
00033e f009      	BREQ _0x202006C
00033f 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000340 5031      	SUBI R19,LOW(1)
000341 85a8      	LDD  R26,Y+8
000342 85b9      	LDD  R27,Y+8+1
000343 9712      	SBIW R26,2
000344 f008      	BRLO _0x2020059
000345 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000346 ff00      	SBRS R16,0
000347 c008      	RJMP _0x202006D
                 _0x202006E:
000348 3050      	CPI  R21,0
000349 f031      	BREQ _0x2020070
00034a 5051      	SUBI R21,LOW(1)
00034b e2e0      	LDI  R30,LOW(32)
00034c 93ea      	ST   -Y,R30
00034d 940e 03e9 	CALL SUBOPT_0xB
00034f cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000350 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000351 cee0      	RJMP _0x2020016
                 _0x2020018:
000352 85ac      	LDD  R26,Y+12
000353 85bd      	LDD  R27,Y+12+1
000354 940e 041f 	CALL __GETW1P
000356 940e 0433 	CALL __LOADLOCR6
000358 9664      	ADIW R28,20
000359 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00035a 92ff      	PUSH R15
00035b 2ef8      	MOV  R15,R24
00035c 9726      	SBIW R28,6
00035d 940e 042e 	CALL __SAVELOCR4
00035f 940e 0401 	CALL SUBOPT_0xE
000361 9730      	SBIW R30,0
000362 f419      	BRNE _0x2020072
000363 efef      	LDI  R30,LOW(65535)
000364 efff      	LDI  R31,HIGH(65535)
000365 c023      	RJMP _0x2080001
                 _0x2020072:
000366 01de      	MOVW R26,R28
000367 9616      	ADIW R26,6
000368 940e 0412 	CALL __ADDW2R15
00036a 018d      	MOVW R16,R26
00036b 940e 0401 	CALL SUBOPT_0xE
00036d 83ee      	STD  Y+6,R30
00036e 83ff      	STD  Y+6+1,R31
00036f e0e0      	LDI  R30,LOW(0)
000370 87e8      	STD  Y+8,R30
000371 87e9      	STD  Y+8+1,R30
000372 01de      	MOVW R26,R28
000373 961a      	ADIW R26,10
000374 940e 0412 	CALL __ADDW2R15
000376 940e 041f 	CALL __GETW1P
000378 93fa      	ST   -Y,R31
000379 93ea      	ST   -Y,R30
00037a 931a      	ST   -Y,R17
00037b 930a      	ST   -Y,R16
00037c eee6      	LDI  R30,LOW(_put_buff_G101)
00037d e0f1      	LDI  R31,HIGH(_put_buff_G101)
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 01de      	MOVW R26,R28
000381 961a      	ADIW R26,10
000382 dea3      	RCALL __print_G101
000383 019f      	MOVW R18,R30
000384 81ae      	LDD  R26,Y+6
000385 81bf      	LDD  R27,Y+6+1
000386 e0e0      	LDI  R30,LOW(0)
000387 93ec      	ST   X,R30
000388 01f9      	MOVW R30,R18
                 _0x2080001:
000389 940e 0435 	CALL __LOADLOCR4
00038b 962a      	ADIW R28,10
00038c 90ff      	POP  R15
00038d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00038e 93ba      	ST   -Y,R27
00038f 93aa      	ST   -Y,R26
000390 91a9          ld   r26,y+
000391 91b9          ld   r27,y+
000392 27ee          clr  r30
000393 27ff          clr  r31
                 strlen0:
000394 916d          ld   r22,x+
000395 2366          tst  r22
000396 f011          breq strlen1
000397 9631          adiw r30,1
000398 cffb          rjmp strlen0
                 strlen1:
000399 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00039a 93ba      	ST   -Y,R27
00039b 93aa      	ST   -Y,R26
00039c 27aa          clr  r26
00039d 27bb          clr  r27
00039e 91e9          ld   r30,y+
00039f 91f9          ld   r31,y+
                 strlenf0:
0003a0 9005      	lpm  r0,z+
0003a1 2000          tst  r0
0003a2 f011          breq strlenf1
0003a3 9611          adiw r26,1
0003a4 cffb          rjmp strlenf0
                 strlenf1:
0003a5 01fd          movw r30,r26
0003a6 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000184           	.BYTE 0x6
                 __base_y_G100:
00018a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003a7 efaa      	LDI  R26,LOW(250)
0003a8 e0b0      	LDI  R27,0
0003a9 940c 0408 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003ab e3a2      	LDI  R26,LOW(50)
0003ac e0b0      	LDI  R27,0
0003ad 940c 0408 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003af e8e4      	LDI  R30,LOW(_str)
0003b0 e0f1      	LDI  R31,HIGH(_str)
0003b1 93fa      	ST   -Y,R31
0003b2 93ea      	ST   -Y,R30
0003b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0003b4 93fa      	ST   -Y,R31
0003b5 93ea      	ST   -Y,R30
0003b6 01f2      	MOVW R30,R4
0003b7 940e 041a 	CALL __CWD1
0003b9 940e 0427 	CALL __PUTPARD1
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0003bc e084      	LDI  R24,4
0003bd 940e 035a 	CALL _sprintf
0003bf 9628      	ADIW R28,8
0003c0 940c 0186 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0003c2 e0b0      	LDI  R27,0
0003c3 940e 0408 	CALL _delay_ms
0003c5 e8a4      	LDI  R26,LOW(_str)
0003c6 e0b1      	LDI  R27,HIGH(_str)
0003c7 940c 01a7 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003c9 940e 041a 	CALL __CWD1
0003cb 940e 0427 	CALL __PUTPARD1
0003cd cfee      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003ce 940e 016d 	CALL __lcd_write_data
0003d0 e0a3      	LDI  R26,LOW(3)
0003d1 e0b0      	LDI  R27,0
0003d2 940c 0408 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003d4 e3a0      	LDI  R26,LOW(48)
0003d5 940e 0159 	CALL __lcd_write_nibble_G100
                +
0003d7 ec88     +LDI R24 , LOW ( 200 )
0003d8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003d9 9701     +SBIW R24 , 1
0003da f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
0003dc 932a      	ST   -Y,R18
0003dd 85ad      	LDD  R26,Y+13
0003de 85be      	LDD  R27,Y+13+1
0003df 85ef      	LDD  R30,Y+15
0003e0 89f8      	LDD  R31,Y+15+1
0003e1 9509      	ICALL
0003e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0003e3 89e8      	LDD  R30,Y+16
0003e4 89f9      	LDD  R31,Y+16+1
0003e5 9734      	SBIW R30,4
0003e6 8be8      	STD  Y+16,R30
0003e7 8bf9      	STD  Y+16+1,R31
0003e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0003e9 85ad      	LDD  R26,Y+13
0003ea 85be      	LDD  R27,Y+13+1
0003eb 85ef      	LDD  R30,Y+15
0003ec 89f8      	LDD  R31,Y+15+1
0003ed 9509      	ICALL
0003ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0003ef 89a8      	LDD  R26,Y+16
0003f0 89b9      	LDD  R27,Y+16+1
0003f1 9614      	ADIW R26,4
0003f2 940e 041f 	CALL __GETW1P
0003f4 83ee      	STD  Y+6,R30
0003f5 83ff      	STD  Y+6+1,R31
0003f6 81ae      	LDD  R26,Y+6
0003f7 81bf      	LDD  R27,Y+6+1
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0003f9 89a8      	LDD  R26,Y+16
0003fa 89b9      	LDD  R27,Y+16+1
0003fb 9614      	ADIW R26,4
0003fc 940e 041f 	CALL __GETW1P
0003fe 87ea      	STD  Y+10,R30
0003ff 87fb      	STD  Y+10+1,R31
000400 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000401 01de      	MOVW R26,R28
000402 961c      	ADIW R26,12
000403 940e 0412 	CALL __ADDW2R15
000405 940e 041f 	CALL __GETW1P
000407 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000408 9610      	adiw r26,0
000409 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00040a ed80     +LDI R24 , LOW ( 0x7D0 )
00040b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00040c 9701     +SBIW R24 , 1
00040d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00040e 95a8      	wdr
00040f 9711      	sbiw r26,1
000410 f7c9      	brne __delay_ms0
                 __delay_ms1:
000411 9508      	ret
                 
                 __ADDW2R15:
000412 2400      	CLR  R0
000413 0daf      	ADD  R26,R15
000414 1db0      	ADC  R27,R0
000415 9508      	RET
                 
                 __ANEGW1:
000416 95f1      	NEG  R31
000417 95e1      	NEG  R30
000418 40f0      	SBCI R31,0
000419 9508      	RET
                 
                 __CWD1:
00041a 2f6f      	MOV  R22,R31
00041b 0f66      	ADD  R22,R22
00041c 0b66      	SBC  R22,R22
00041d 2f76      	MOV  R23,R22
00041e 9508      	RET
                 
                 __GETW1P:
00041f 91ed      	LD   R30,X+
000420 91fc      	LD   R31,X
000421 9711      	SBIW R26,1
000422 9508      	RET
                 
                 __GETW1PF:
000423 9005      	LPM  R0,Z+
000424 91f4      	LPM  R31,Z
000425 2de0      	MOV  R30,R0
000426 9508      	RET
                 
                 __PUTPARD1:
000427 937a      	ST   -Y,R23
000428 936a      	ST   -Y,R22
000429 93fa      	ST   -Y,R31
00042a 93ea      	ST   -Y,R30
00042b 9508      	RET
                 
                 __SAVELOCR6:
00042c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00042d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00042e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00042f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000430 931a      	ST   -Y,R17
000431 930a      	ST   -Y,R16
000432 9508      	RET
                 
                 __LOADLOCR6:
000433 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000434 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000435 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000436 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000437 8119      	LDD  R17,Y+1
000438 8108      	LD   R16,Y
000439 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  26 r1 :   1 r2 :   0 r3 :   0 r4 :   6 r5 :   1 r6 :   9 r7 :   2 
r8 :   9 r9 :   2 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  24 r25:   5 r26: 109 r27:  48 r28:  15 r29:   1 r30: 207 r31:  67 
x  :  23 y  : 177 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  28 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  34 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  80 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  27 ld    :  29 ldd   :  77 ldi   : 126 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  21 movw  :  33 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   7 out   :  26 pop   :   1 push  :   1 rcall :  21 ret   :  27 
reti  :   1 rjmp  :  71 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   3 sbis  :   4 sbiw  :  22 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000874   2052    112   2164   16384  13.2%
[.dseg] 0x000060 0x00018e      0     46     46    1024   4.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
